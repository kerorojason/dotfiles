#!/bin/bash
#
# Install dotfiles.

set -eu

BASEDIR=$(cd "$(dirname "$0")"; pwd)
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

##
# Functions
##

# Function to create symbolic link and backups the target if something already exists there
link() {
  source="$1"
  target="$2"
  echo "$source â†’ $target"

  if [[ -e "$target" ]] && [[ ! -L "$target" ]]; then
    backup_name="$target.$TIMESTAMP.bak"
    echo "  ...creating backup for $target: $backup_name"
    mv -f "$target" "$backup_name"
  elif [[ -L "$target" ]]; then
    echo "  ...overriding existing symbolic link: $target"
    rm "$target"
  fi

  ln -sf "$source" "$target"
}

# Function to echo a heaer message for a phase
phase() {
  printf "$(tput bold)$(tput sgr 0 1)%s$(tput sgr0)\\n" "$@"
}

##
# Main Phases
##

# Switch to the dotfiles directory
cd "$BASEDIR"

# Check if git exists
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "Error: can't find git."
  exit -1
fi

phase "Update Git Submodules"

git submodule init
git submodule update

phase "Link General Files"

for i in _*; do
  source="$BASEDIR/$i"
  target="$HOME/${i/_/.}"
  link "$source" "$target"
done

if [[ $(uname) == "Darwin" ]]; then
  phase "Build and link User Scripts for macOS"
  mac_jxa_dir="$BASEDIR/mac/JXA"

  cd "$mac_jxa_dir"
  for i in *.js; do
    name=${i/.js/}
    osacompile -l JavaScript -o "$name.scptd" "$i"
    osacompile -l JavaScript -o "$name.app" "$i"
  done
  cd "$BASEDIR"

  # mkdir -p "$HOME/Library/Scripts"
  # link "$mac_jxa_dir" "$HOME/Library/Scripts/JXA"
  link "$mac_jxa_dir" "$HOME/Library/JXA"
fi

phase "Link User Packages for Sublime Text 3"

if [[ -d "$BASEDIR/subl3/Packages" ]]; then
  subl_source_packages_dir="$BASEDIR/subl3/Packages"
  if [[ $(uname) == "Darwin" ]]; then
    test ! -e "$HOME/Library/Application Support/Sublime Text 3/Packages" && mkdir -p "$HOME/Library/Application Support/Sublime Text 3/Packages"
    subl_target_packages_dir="$HOME/Library/Application Support/Sublime Text 3/Packages"
  else
    test ! -e "$HOME/.config/sublime-text-3/Packages" && mkdir -p "$HOME/.config/sublime-text-3/Packages"
    subl_target_packages_dir="$HOME/.config/sublime-text-3/Packages"
  fi

  cd "$subl_source_packages_dir"
  for i in *; do
    link "$subl_source_packages_dir/$i" "$subl_target_packages_dir/$i"
  done
  cd "$BASEDIR"
fi

phase "Link Configuration Files for VSCode"

if [[ -d "$BASEDIR/vscode/User" ]]; then
  source="$BASEDIR/vscode/User"
  if [[ $(uname) == "Darwin" ]]; then
    test ! -e "$HOME/Library/Application Support/Code" && mkdir -p "$HOME/Library/Application Support/Code"
    target="$HOME/Library/Application Support/Code/User"
  fi
  link "$source" "$target"
fi

if [[ -d "$BASEDIR/vscode/custom" ]]; then
  source="$BASEDIR/vscode/custom"
  if [[ $(uname) == "Darwin" ]]; then
    test ! -e "$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser" && mkdir -p "$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser"
    target="$HOME/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/custom"
  fi
  link "$source" "$target"
fi

phase "Process Secret Dotfiles"

if [[ -d "$BASEDIR/secret" ]]; then

  echo "Removing all permissions for group/world on secret dotfiles"
  chmod -R o-r "$BASEDIR/secret"
  chmod -R o-w "$BASEDIR/secret"
  chmod -R o-x "$BASEDIR/secret"
  chmod -R g-r "$BASEDIR/secret"
  chmod -R g-w "$BASEDIR/secret"
  chmod -R g-x "$BASEDIR/secret"

  phase "Link Files From Secret Dotfiles"

  for i in secret/_*
  do
    source="$BASEDIR/$i"
    target="$HOME/${i/secret\/_/.}"
    link "$source" "$target"
  done

  phase "Installing Secret Dotfiles"

  if [[ -x "$BASEDIR/secret/install" ]]; then
    export -f link
    "$BASEDIR/secret/install"
  else
    echo "$BASEDIR/secret/install is not an executable, skipping"
  fi


else
  echo "$BASEDIR/secret does not exist, skipping"
fi

echo "Done"
