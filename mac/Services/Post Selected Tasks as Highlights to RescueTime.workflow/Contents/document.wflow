<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>444.7</string>
	<key>AMApplicationVersion</key>
	<string>2.8</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>執行 JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>app = Application.currentApplication();
app.includeStandardAdditions = true;
apiKey = app.doShellScript('defaults read com.rescuetime api.key');

r = app.doShellScript(`curl https://www.rescuetime.com/anapi/highlights_feed?key=${apiKey}`);
json = JSON.parse(r);
highlightsOfDates = json.reduce((obj, v) =&gt; {
  if (!obj[v.date]) obj[v.date] = [];
  obj[v.date].push(v.description);
  return obj;
}, {});

function toISODate(date) { return date.toISOString().substring(0, 10); }

function getFullTaskName(task) {
  const parentTask = task.parentTask();
  if (parentTask) {
    return `${getFullTaskName(parentTask)} ‹ ${task.name()}`;
  }

  return task.name();
}

omniFocus = Application('OmniFocus');
omniFocus.includeStandardAdditions = true;

selectedItems = omniFocus.windows[0].content.selectedTrees.value();

completedTasks = selectedItems.filter((item) =&gt; {
  try {
    return !!item.completionDate();
  } catch (e) {
    return false;
  }
});

erroredTaskDisplayNames = [];

for (task of completedTasks) {
  let taskDisplayName = task.name();
  try {
    taskDisplayName = getFullTaskName(task);
    const completionDate = task.completionDate();
    const isoCompletionDate = toISODate(completionDate);

    if (highlightsOfDates[isoCompletionDate] &amp;&amp; highlightsOfDates[isoCompletionDate].includes(taskDisplayName)) {
      console.log(`Skipping ${taskDisplayName}`);
      continue;
    }

    const source = 'OmniFocus';
    const postURL = `https://www.rescuetime.com/anapi/highlights_post?key=${apiKey}&amp;highlight_date=${completionDate.toISOString()}&amp;description=${encodeURIComponent(taskDisplayName)}&amp;source=${source}`;
    console.log(`Uploading ${taskDisplayName} with URL ${postURL}`);
    const res = app.doShellScript(`curl -X POST "${postURL.replace(/"/g, '\\"')}"`);
    console.log(`Upload response: ${res}`);

  } catch (e) {
    console.log('Error', e);
    erroredTaskDisplayNames.push(taskDisplayName);
  }
}

if (erroredTaskDisplayNames.length &gt; 0) {
  const { buttonReturned } = omniFocus.displayAlert(`Error occured while uploading the following tasks: ${erroredTaskDisplayNames.map(t =&gt; `"${t}"`).join(', ')}.`, {
    as: 'warning',
    buttons: ['Close', 'Copy Errored Items'],
    defaultButton: 2,
  });

  if (buttonReturned === 'Copy Errored Items') {
    omniFocus.setTheClipboardTo(erroredTaskDisplayNames.join("\n") + "\n");
  }
}

app.openLocation('https://www.rescuetime.com/browse/highlights/for/the/last30days/of/today');
</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>B8395E0C-35F1-407C-B3DA-1634A6E0F3DB</string>
				<key>Keywords</key>
				<array>
					<string>執行</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>23930B3A-0DEF-42C0-B0A5-0FA9DD0BB06F</string>
				<key>UUID</key>
				<string>87D62FDE-CCC1-4A46-A78D-50FF7B9596EF</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>420.000000:316.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceApplicationBundleID</key>
		<string>com.omnigroup.OmniFocus2.MacAppStore</string>
		<key>serviceApplicationPath</key>
		<string>/Applications/OmniFocus.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
